buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.114'
		classpath 'com.guardsquare:proguard-gradle:' + (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11) ? '7.2.0-beta2' : '7.1.0')
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'maven-publish'
	id 'checkstyle'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "quilt-loader"

def ENV = System.getenv()

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: 'checkstyle'

	version = version + (ENV.GITHUB_ACTIONS ? (ENV.SNAPSHOTS_URL ? "-SNAPSHOT" : "") : "+local")
}

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}

	mavenCentral()

	maven {
		name = 'Mojang'
		url = 'https://libraries.minecraft.net/'
	}
}

sourceSets {
	main {
		java.srcDirs = ['src/main/java', 'src/main/legacyJava']
	}
}

configurations {
	include

	implementation {
		extendsFrom include
	}
}

dependencies {
	// TODO: Remove when we bump major version
	api("com.google.code.gson:gson:2.8.0")

	// FIXME: Match logger from MC for now until we detach from it
	implementation("org.apache.logging.log4j:log4j-api:2.14.1")
	implementation("org.apache.logging.log4j:log4j-core:2.14.1")

	implementation("org.ow2.asm:asm:$project.asmVersion")
	implementation("org.ow2.asm:asm-analysis:$project.asmVersion")
	implementation("org.ow2.asm:asm-commons:$project.asmVersion")
	implementation("org.ow2.asm:asm-tree:$project.asmVersion")
	implementation("org.ow2.asm:asm-util:$project.asmVersion")

	// ASM is required for the mixin annotation processor
	annotationProcessor("org.ow2.asm:asm:$project.asmVersion")
	annotationProcessor("org.ow2.asm:asm-analysis:$project.asmVersion")
	annotationProcessor("org.ow2.asm:asm-commons:$project.asmVersion")
	annotationProcessor("org.ow2.asm:asm-tree:$project.asmVersion")
	annotationProcessor("org.ow2.asm:asm-util:$project.asmVersion")

	implementation("org.quiltmc:sponge-mixin:$project.mixinVersion") {
		exclude module: "launchwrapper"
		exclude module: "guava"
	}

	implementation("org.quiltmc:quilt-json5:$project.json5Version") // TODO: shadow me
	implementation("org.quiltmc:tiny-mappings-parser:$project.tinyMappingsParserVersion")
	implementation("org.quiltmc:tiny-remapper:$project.tinyRemapperVersion")
	implementation("org.quiltmc:access-widener:$project.accessWidenerVersion")

	implementation("com.google.jimfs:jimfs:$project.jimfsVersion") {
		exclude module: "guava"
	}

	// FIXME: Shadow this in jimfs
	implementation("com.google.guava:guava:21.0")

	implementation("org.quiltmc:quilt-loader-sat4j:$project.sat4jVersion")

	// launchwrapper + dependencies
	implementation("net.minecraft:launchwrapper:$project.launchwrapperVersion") {
		transitive = false
	}

	implementation("net.sf.jopt-simple:jopt-simple:$project.joptsimpleVersion")

	testCompileOnly("org.jetbrains:annotations:$project.jbAnnotationsVersions")

	// Unit testing
	testImplementation(platform("org.junit:junit-bom:$project.junitVersion"))
	testImplementation("org.junit.jupiter:junit-jupiter")
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion

	withJavadocJar()
	withSourcesJar()
}

jar {
	enabled = false
	from sourceSets.main.output
	from project(":minecraft").sourceSets.main.output
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	manifest {
		attributes (
			"Main-Class": "org.quiltmc.impl.impl.launch.server.QuiltServerLauncher"
		)
	}
}

sourcesJar {
	from sourceSets.main.allSource
	from project(":minecraft").sourceSets.main.allSource
}

// useful for creating test mod jar
task testJar(type: Jar) {
	archiveClassifier = "test"
	from sourceSets.test.output
}

task copyJson() {
	def inJson = file('src/main/resources/quilt-installer.json')
	def inLwJson = file('src/main/resources/quilt-installer.launchwrapper.json')

	def outJson = file("build/libs/${archivesBaseName}-${version}.json")
	def outLwJson = file("build/libs/${archivesBaseName}-${version}.launchwrapper.json")

	inputs.files (inJson, inLwJson)
	outputs.files(outJson, outLwJson)

	doLast {
		outJson.text = inJson.text
		outLwJson.text = inLwJson.text
	}
}

tasks.build.dependsOn "copyJson"

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	// Target JDK 8
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}

		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
		)

		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}

	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError = false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	archiveClassifier = 'javadoc'
}

build.dependsOn javadocJar

allprojects {
	checkstyle {
		configFile = project.rootProject.file("checkstyle.xml")
		toolVersion = '8.44'
	}

	license {
		header project.rootProject.file("codeformat/FABRIC-HEADER")
		include '**/*.java'

		// Exclude gson since it is google's code, we just modify and bundle it
		exclude '**/lib/gson/*.java'
	}
}

// Causes more trouble than its worth
tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact javadocJar
			artifact(file('src/main/resources/quilt-installer.json')) {
				builtBy remapJar
			}
			artifact(file('src/main/resources/quilt-installer.launchwrapper.json')) {
				builtBy remapJar
				classifier = "launchwrapper"
			}
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		} else if (ENV.SNAPSHOTS_URL) {
			maven {
				url ENV.SNAPSHOTS_URL

				credentials {
					username ENV.SNAPSHOTS_USERNAME
					password ENV.SNAPSHOTS_PASSWORD
				}
			}
		} else {
			mavenLocal()
		}
	}
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	return "unknown"
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: publish) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("Quilt Loader $version")
		releaseBuilder.body(ENV.CHANGELOG ?: "No changelog provided")
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(false)

		releaseBuilder.create()
	}
}

// Refresh meta after publish
tasks.register("refreshMeta", RefreshMetaTask)

class RefreshMetaTask extends DefaultTask {
	@TaskAction
	void doTask() {
		def ENV = System.getenv()

		if (ENV.META_UPDATE_URL) {
			logger.lifecycle("Refreshing meta")
			URL url = new URL(ENV.META_UPDATE_URL)

			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.requestMethod = "GET"

			try (InputStream _ = connection.inputStream) {
			}

			if (connection.responseCode != 200) {
				throw GradleException("Failed to refresh meta server")
			}

			logger.lifecycle("Meta refresh done")
		} else {
			logger.lifecycle("META_UPDATE_URL not specified, not refreshing meta")
		}
	}
}

publish.mustRunAfter checkVersion
github.mustRunAfter checkVersion
